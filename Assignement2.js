/**  1. What is NPM?
 *   -> NPM doesn't stand for Node Package Manager, it's used to manage packages( is a package manager) and is default package manager for Node.js(JS runtime environment)
 *   2. What is parcel/webpack? Why do we need it?
 *   -> Parcel/webpack are module bundlers, they're used to bundle our code and packages together, optimize for production build using various techniques like combining all useful JS files/code into 1 Js file, etc. Essentially they take in dev build and produce a production build which is more efficent and can be shipped to a user.
 *   3. What is 'parcel-cache'?
 *   -> parcel-cache is a folder/directory generated by parcel build command where parcel stores all it's immediate build files/results(cache). When we rebuild the project, parcel doesn't have to build the project from scratch it'll only build new files and the files which've been changed/updated, built versions of unchanged files are already stored in .parcel-cache folder which can be used unless it's the first time parcel build command is run.
     4. What is npx?
    -> npx executes <command> provided after npx, it'll execute <command> either from the local node_modules or from central cache, install dependencies/packages which're required to execute that <command>. By default it'll first check whether <command> exists in local project binaries($PATH), if not found it'll be installed prior to execution. Multiple flags can be put with npx <command> <flags> to change how npx will handle certain things like :'--no-install' if passed to npx, it'll only try to run <command> if it already exists in the current path.
     5. What is difference between dependencies & devDependencies?
    ->  Dependencies consists of the pacakges that're required on production for our app to work, where as dev dependencies consists of packages which're only required for local development and testing.
    6.  What is Tree Shaking?
    ->  Tree Shaking is a term commonly used within a JS context to describe the removal of dead/unused code. It relies on Import and Export statements to detect if code modules are imported and exported for use between Javascript files. In modern JS applications we use module bundlers like Parcel, Webpack, etc to bundle multiple JS files into one which'd automatically remove dead code when bundling the JS files. This is important for optimized production ready code with minimal file size and clean structures.
    7. What is Hot Module Replacement?
    -> Hot Module Replacement is a technique used by modern JS bundlers which allows them to only build and replace files which've been changed.
    8. List down your 5 favourite superpowers of Parcel and describe any 3.
    -> File Watcher Algorithm , Hot Module Replacement, Bundling required code together and removing dead/unUsed code using TreeShaking, compressing media/node_modules/etc, adding Polyfills so that this web application is compatible and can be viewed on all required platforms, caching while development, consistent hashing algorithm for all bundling, provides HTTPS on development server, handles port configuration,etc.
        1. File Watcher Algorithm + HMR + Caching -> File watcher algorithm watches all the files and HMR will trigger new build for modified files once file watcher algorithm sees any modified file and uses the rest of the available previous unchanged build from cache.
        2. Compresses/minifies and bundles the files along with Media, node_modules, etc.
        3. Adding Polyfills -> It creates & adds polyfills for compatibility/support with older browser versions(add list of browser versions which must be supported to browsersList). 
    9. What is .gitignore? What should we add & not add into it?
    ->  .Gitignore is a file which tells GIT version system the files to keep track of and ignore when committing projects to GITHUB repository. We should not add all the files which can't be replicated or add files which can be generated on server using package.json or package_lock.json(This'd include node_modules).    
    10. What is the difference between Package.json & package-lock.json?
    -> Package.json stores the list of packages on which our software depends to run along with project's metadata. Package-lock also stores the same information but it's more specific with respect to the version(stores exact version). Package.json usually contains ~ or ^ which'd signify if our software will work with a major(fixes major & minor release, supports patch updates) or minor upgrade(along with patch updates-fixes major version) of that package whereas Package-lock stores the exact version being used on the dev server hence ensuring deterministic installation by locking the exact version of dependencies and their dependencies.
    11. Why should I not modify Package-lock.json?
    -> It might happen that it's working on dev but not on prod or remote server due to different versions of packages on both systems(one would not work as expected due to major/minor release)
    12. What is node_modules? Is it a good idea to push to GIT?
    -> Node_modules is a folder/directory where all the packages along with their dependent and transitive dependent packages are stored/installed locally. It's not recommended to push node_modules to GIT as it's very large in size, and can be easily regenerated using package.json and package-lock.json.
    13. What is the dist folder?
    -> dist is the folder where Parcel stores the final minified, production ready bundled files. This folder is the default output for Parcel for our build results
    14. What is browserslist?
    -> BrowsersList is a configuration file which is used to share different target browsers and Node.js version.
    
    */
var b=2;
function attachEvents(){
    var x = 5;
    document.getElementById("a1").addEventListener("click",
        function eventer(){
            console.warn('click no>',x++);
        }
    )
}
attachEvents();